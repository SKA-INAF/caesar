/*----- PROTECTED REGION ID(SFinderClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        SFinderClass.h
//
// description : Include for the SFinder root class.
//               This class is the singleton class for
//                the SFinder device class.
//               It contains all properties and methods which the 
//               SFinder requires only once e.g. the commands.
//
// project :     Source finder worker
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SFinderClass_H
#define SFinderClass_H

#include <tango.h>
#include <SFinder.h>


/*----- PROTECTED REGION END -----*/	//	SFinderClass.h


namespace SFinder_ns
{
/*----- PROTECTED REGION ID(SFinderClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	SFinderClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute useLocalBkg class definition
class useLocalBkgAttrib: public Tango::Attr
{
public:
	useLocalBkgAttrib():Attr("useLocalBkg",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~useLocalBkgAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_useLocalBkg(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_useLocalBkg(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_useLocalBkg_allowed(ty);}
};

//	Attribute use2ndPassInLocalBkg class definition
class use2ndPassInLocalBkgAttrib: public Tango::Attr
{
public:
	use2ndPassInLocalBkgAttrib():Attr("use2ndPassInLocalBkg",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~use2ndPassInLocalBkgAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_use2ndPassInLocalBkg(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_use2ndPassInLocalBkg(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_use2ndPassInLocalBkg_allowed(ty);}
};

//	Attribute skipNegativePixels class definition
class skipNegativePixelsAttrib: public Tango::Attr
{
public:
	skipNegativePixelsAttrib():Attr("skipNegativePixels",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~skipNegativePixelsAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_skipNegativePixels(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_skipNegativePixels(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_skipNegativePixels_allowed(ty);}
};

//	Attribute skipOutliersInLocalBkg class definition
class skipOutliersInLocalBkgAttrib: public Tango::Attr
{
public:
	skipOutliersInLocalBkgAttrib():Attr("skipOutliersInLocalBkg",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~skipOutliersInLocalBkgAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_skipOutliersInLocalBkg(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_skipOutliersInLocalBkg(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_skipOutliersInLocalBkg_allowed(ty);}
};

//	Attribute localBkgMethod class definition
class localBkgMethodAttrib: public Tango::Attr
{
public:
	localBkgMethodAttrib():Attr("localBkgMethod",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~localBkgMethodAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_localBkgMethod(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_localBkgMethod(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_localBkgMethod_allowed(ty);}
};

//	Attribute bkgEstimator class definition
class bkgEstimatorAttrib: public Tango::Attr
{
public:
	bkgEstimatorAttrib():Attr("bkgEstimator",
			Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~bkgEstimatorAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_bkgEstimator(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_bkgEstimator(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_bkgEstimator_allowed(ty);}
};

//	Attribute useBeamInfoInBkg class definition
class useBeamInfoInBkgAttrib: public Tango::Attr
{
public:
	useBeamInfoInBkgAttrib():Attr("useBeamInfoInBkg",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~useBeamInfoInBkgAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_useBeamInfoInBkg(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_useBeamInfoInBkg(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_useBeamInfoInBkg_allowed(ty);}
};

//	Attribute localBkgBoxSizeX class definition
class localBkgBoxSizeXAttrib: public Tango::Attr
{
public:
	localBkgBoxSizeXAttrib():Attr("localBkgBoxSizeX",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~localBkgBoxSizeXAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_localBkgBoxSizeX(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_localBkgBoxSizeX(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_localBkgBoxSizeX_allowed(ty);}
};

//	Attribute localBkgBoxSizeY class definition
class localBkgBoxSizeYAttrib: public Tango::Attr
{
public:
	localBkgBoxSizeYAttrib():Attr("localBkgBoxSizeY",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~localBkgBoxSizeYAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_localBkgBoxSizeY(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_localBkgBoxSizeY(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_localBkgBoxSizeY_allowed(ty);}
};

//	Attribute localBkgGridStepSizeX class definition
class localBkgGridStepSizeXAttrib: public Tango::Attr
{
public:
	localBkgGridStepSizeXAttrib():Attr("localBkgGridStepSizeX",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~localBkgGridStepSizeXAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_localBkgGridStepSizeX(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_localBkgGridStepSizeX(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_localBkgGridStepSizeX_allowed(ty);}
};

//	Attribute localBkgGridStepSizeY class definition
class localBkgGridStepSizeYAttrib: public Tango::Attr
{
public:
	localBkgGridStepSizeYAttrib():Attr("localBkgGridStepSizeY",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~localBkgGridStepSizeYAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_localBkgGridStepSizeY(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_localBkgGridStepSizeY(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_localBkgGridStepSizeY_allowed(ty);}
};

//	Attribute seedThr class definition
class seedThrAttrib: public Tango::Attr
{
public:
	seedThrAttrib():Attr("seedThr",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~seedThrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_seedThr(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_seedThr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_seedThr_allowed(ty);}
};

//	Attribute mergeThr class definition
class mergeThrAttrib: public Tango::Attr
{
public:
	mergeThrAttrib():Attr("mergeThr",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~mergeThrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_mergeThr(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_mergeThr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_mergeThr_allowed(ty);}
};

//	Attribute minNPix class definition
class minNPixAttrib: public Tango::Attr
{
public:
	minNPixAttrib():Attr("minNPix",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~minNPixAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_minNPix(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_minNPix(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_minNPix_allowed(ty);}
};

//	Attribute mergeBelowSeed class definition
class mergeBelowSeedAttrib: public Tango::Attr
{
public:
	mergeBelowSeedAttrib():Attr("mergeBelowSeed",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~mergeBelowSeedAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_mergeBelowSeed(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_mergeBelowSeed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_mergeBelowSeed_allowed(ty);}
};

//	Attribute searchNegativeExcess class definition
class searchNegativeExcessAttrib: public Tango::Attr
{
public:
	searchNegativeExcessAttrib():Attr("searchNegativeExcess",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~searchNegativeExcessAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_searchNegativeExcess(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_searchNegativeExcess(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_searchNegativeExcess_allowed(ty);}
};

//	Attribute nestedBlobThrFactor class definition
class nestedBlobThrFactorAttrib: public Tango::Attr
{
public:
	nestedBlobThrFactorAttrib():Attr("nestedBlobThrFactor",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~nestedBlobThrFactorAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_nestedBlobThrFactor(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_nestedBlobThrFactor(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_nestedBlobThrFactor_allowed(ty);}
};

//	Attribute searchCompactSources class definition
class searchCompactSourcesAttrib: public Tango::Attr
{
public:
	searchCompactSourcesAttrib():Attr("searchCompactSources",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~searchCompactSourcesAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_searchCompactSources(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_searchCompactSources(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_searchCompactSources_allowed(ty);}
};

//	Attribute selectCompactSources class definition
class selectCompactSourcesAttrib: public Tango::Attr
{
public:
	selectCompactSourcesAttrib():Attr("selectCompactSources",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~selectCompactSourcesAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_selectCompactSources(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_selectCompactSources(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_selectCompactSources_allowed(ty);}
};

//	Attribute useCircRatioCut class definition
class useCircRatioCutAttrib: public Tango::Attr
{
public:
	useCircRatioCutAttrib():Attr("useCircRatioCut",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~useCircRatioCutAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_useCircRatioCut(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_useCircRatioCut(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_useCircRatioCut_allowed(ty);}
};

//	Attribute psCircRatioThr class definition
class psCircRatioThrAttrib: public Tango::Attr
{
public:
	psCircRatioThrAttrib():Attr("psCircRatioThr",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~psCircRatioThrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_psCircRatioThr(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_psCircRatioThr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_psCircRatioThr_allowed(ty);}
};

//	Attribute useElongCut class definition
class useElongCutAttrib: public Tango::Attr
{
public:
	useElongCutAttrib():Attr("useElongCut",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~useElongCutAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_useElongCut(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_useElongCut(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_useElongCut_allowed(ty);}
};

//	Attribute psElongThr class definition
class psElongThrAttrib: public Tango::Attr
{
public:
	psElongThrAttrib():Attr("psElongThr",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~psElongThrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_psElongThr(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_psElongThr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_psElongThr_allowed(ty);}
};

//	Attribute useEllipseAreaRatioCut class definition
class useEllipseAreaRatioCutAttrib: public Tango::Attr
{
public:
	useEllipseAreaRatioCutAttrib():Attr("useEllipseAreaRatioCut",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~useEllipseAreaRatioCutAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_useEllipseAreaRatioCut(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_useEllipseAreaRatioCut(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_useEllipseAreaRatioCut_allowed(ty);}
};

//	Attribute psEllipseAreaRatioMinThr class definition
class psEllipseAreaRatioMinThrAttrib: public Tango::Attr
{
public:
	psEllipseAreaRatioMinThrAttrib():Attr("psEllipseAreaRatioMinThr",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~psEllipseAreaRatioMinThrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_psEllipseAreaRatioMinThr(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_psEllipseAreaRatioMinThr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_psEllipseAreaRatioMinThr_allowed(ty);}
};

//	Attribute psEllipseAreaRatioMaxThr class definition
class psEllipseAreaRatioMaxThrAttrib: public Tango::Attr
{
public:
	psEllipseAreaRatioMaxThrAttrib():Attr("psEllipseAreaRatioMaxThr",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~psEllipseAreaRatioMaxThrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_psEllipseAreaRatioMaxThr(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_psEllipseAreaRatioMaxThr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_psEllipseAreaRatioMaxThr_allowed(ty);}
};

//	Attribute useMaxNPixCut class definition
class useMaxNPixCutAttrib: public Tango::Attr
{
public:
	useMaxNPixCutAttrib():Attr("useMaxNPixCut",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~useMaxNPixCutAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_useMaxNPixCut(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_useMaxNPixCut(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_useMaxNPixCut_allowed(ty);}
};

//	Attribute psMaxNPix class definition
class psMaxNPixAttrib: public Tango::Attr
{
public:
	psMaxNPixAttrib():Attr("psMaxNPix",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~psMaxNPixAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_psMaxNPix(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_psMaxNPix(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_psMaxNPix_allowed(ty);}
};

//	Attribute useBoundingBoxCut class definition
class useBoundingBoxCutAttrib: public Tango::Attr
{
public:
	useBoundingBoxCutAttrib():Attr("useBoundingBoxCut",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~useBoundingBoxCutAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_useBoundingBoxCut(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_useBoundingBoxCut(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_useBoundingBoxCut_allowed(ty);}
};

//	Attribute minBoundingBoxThr class definition
class minBoundingBoxThrAttrib: public Tango::Attr
{
public:
	minBoundingBoxThrAttrib():Attr("minBoundingBoxThr",
			Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~minBoundingBoxThrAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_minBoundingBoxThr(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<SFinder *>(dev))->write_minBoundingBoxThr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_minBoundingBoxThr_allowed(ty);}
};

//	Attribute sourceData class definition
class sourceDataAttrib: public Tango::Attr
{
public:
	sourceDataAttrib():Attr("sourceData",
			Tango::DEV_STRING, Tango::READ) {};
	~sourceDataAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_sourceData(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_sourceData_allowed(ty);}
};

//	Attribute runProgress class definition
class runProgressAttrib: public Tango::SpectrumAttr
{
public:
	runProgressAttrib():SpectrumAttr("runProgress",
			Tango::DEV_STRING, Tango::READ, 10) {};
	~runProgressAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_runProgress(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_runProgress_allowed(ty);}
};

//	Attribute encodedSourceData class definition
class encodedSourceDataAttrib: public Tango::SpectrumAttr
{
public:
	encodedSourceDataAttrib():SpectrumAttr("encodedSourceData",
			Tango::DEV_UCHAR, Tango::READ, 10000000) {};
	~encodedSourceDataAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<SFinder *>(dev))->read_encodedSourceData(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<SFinder *>(dev))->is_encodedSourceData_allowed(ty);}
};


//=========================================
//	Define classes for pipes
//=========================================
//	Pipe compactSourcesPipe class definition
class compactSourcesPipeClass: public Tango::Pipe
{
public:
	compactSourcesPipeClass(const string &name, Tango::DispLevel level)
		:Pipe(name, level) {};

	~compactSourcesPipeClass() {};

	virtual bool is_allowed (Tango::DeviceImpl *dev,Tango::PipeReqType _prt)
		{return (static_cast<SFinder *>(dev))->is_compactSourcesPipe_allowed(_prt);}
	virtual void read(Tango::DeviceImpl *dev)
		{(static_cast<SFinder *>(dev))->read_compactSourcesPipe(*this);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command ExtractSources class definition
class ExtractSourcesClass : public Tango::Command
{
public:
	ExtractSourcesClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ExtractSourcesClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ExtractSourcesClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SFinder *>(dev))->is_ExtractSources_allowed(any);}
};

//	Command Configure class definition
class ConfigureClass : public Tango::Command
{
public:
	ConfigureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ConfigureClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ConfigureClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SFinder *>(dev))->is_Configure_allowed(any);}
};

//	Command RegisterMe class definition
class RegisterMeClass : public Tango::Command
{
public:
	RegisterMeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RegisterMeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RegisterMeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SFinder *>(dev))->is_RegisterMe_allowed(any);}
};

//	Command Free class definition
class FreeClass : public Tango::Command
{
public:
	FreeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	FreeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~FreeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SFinder *>(dev))->is_Free_allowed(any);}
};

//	Command Reserve class definition
class ReserveClass : public Tango::Command
{
public:
	ReserveClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReserveClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReserveClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<SFinder *>(dev))->is_Reserve_allowed(any);}
};


/**
 *	The SFinderClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  SFinderClass : public Tango::DeviceClass
#else
class SFinderClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(SFinderClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static SFinderClass *init(const char *);
		static SFinderClass *instance();
		~SFinderClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		SFinderClass(string &);
		static SFinderClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	SFinder_H
