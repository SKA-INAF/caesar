syntax = "proto2";
//package SourcePB;
package CaesarPB;

message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  optional int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  optional int32 nanos = 2;
}

//==============================
//==   IMG METADATA
//==============================
message ImgMetaData {
	//Image size
	optional int32 Nx= 1;
	optional int32 Ny= 2;

	//Reference pixel id
	optional int32 Cx= 3;
	optional int32 Cy= 4;

	//Reference pixel coords
	optional float Xc= 5;
	optional float Yc= 6;

	//Pixel size
	optional float dX= 7;
	optional float dY= 8;

	//System rotation info
	optional float RotX= 9;
	optional float RotY= 10;

	//Type of astro coords
	optional string CoordTypeX= 11;
	optional string CoordTypeY= 12;

	//Units
	optional string BUnit= 13;

	//Beam info
	optional float Bmaj= 14;
	optional float Bmin= 15;
	optional float Bpa= 16;

	//Frequency info		
	optional string FreqUnit= 17;
	optional float Freq= 18;
	optional float dFreq= 19;		
	optional float FreqRef= 20;

	//Obs Epoch
	optional float Epoch= 21;

	//Type of WCS
	optional string m_wcsType= 22;

}//close ImgMetaData schema

//==============================
//==   PIXEL
//==============================
message Pixel {
	optional int64 id= 1;
	enum PixelType {
		eNormal = 1;
		eSeed= 2;
		eHalo = 3;
  }
	optional PixelType type = 2;
	optional float S= 3;
	optional float x= 4;
	optional float y= 5;
	optional int64 ix= 6;
	optional int64 iy= 7;
	optional bool isOnEdge= 8;
	optional float distanceToEdge= 9;
	optional float S_curv= 10;
	optional float S_edge= 11;
	optional float bkgLevel= 12;
	optional float noiseLevel= 13;

}//close Pixel schema

//==============================
//==   POINT
//==============================
message Point {
	optional float x= 1;
	optional float y= 2;
}

//==============================
//==   CONTOUR
//==============================
message Contour {
	optional bool HasParameters= 1;
	optional float Area= 2;
	optional float Perymeter= 3;
	optional bool IsConvexContour= 4;
	optional float CircularityRatio= 5;
	optional Point BoundingBoxCenter= 6;
	optional float BoundingBoxMaj= 7;
	optional float BoundingBoxMin= 8;
	optional float BoundingBoxAngle= 9;
	optional float Elongation= 10;
	optional float Rectangularity= 11;
	optional float Roundness= 12;
	optional float Eccentricity= 13;
	optional float TiltAngle= 14;
	optional bool HasEllipseFit= 15;
	optional Point EllipseCenter= 16;
	optional float EllipseMajAxis= 17;
	optional float EllipseMinAxis= 18;
	optional float EllipseRotAngle= 19;
	optional float EllipseFitRedChi2= 20;
	optional float EllipseAreaRatio= 21;

	// spatial moments: m00, m10, m01, m20, m11, m02, m30, m21, m12, m03
	optional float m00= 22;
	optional float m10= 23;
	optional float m01= 24;
	optional float m20= 25;
	optional float m11= 26;
	optional float m02= 27;
	optional float m30= 28;
	optional float m21= 29;
	optional float m12= 30;
	optional float m03= 31;

	optional float mu20= 32;
	optional float mu11= 33;
	optional float mu02= 34;
	optional float mu30= 35;
	optional float mu21= 36;
	optional float mu12= 37;
	optional float mu03= 38;

 	optional float nu20= 39;
	optional float nu11= 40;
	optional float nu02= 41;
	optional float nu30= 42;
	optional float nu21= 43;
	optional float nu12= 44;
	optional float nu03= 45;
	
	repeated float HuMoments= 46;
	repeated Point BoundingBoxVertex= 47;
	optional Point Centroid= 48;
		
	repeated float RealFDs= 49;
	repeated float ImagFDs= 50;
	repeated float ModFDs= 51;//module of complex Fourier descriptors
	repeated float BendingEnergies= 52;
	repeated float CentroidDistanceModFDs= 53;//module of complex Fourier descriptors

	repeated Point m_Points= 54;

	optional bool HasFDPars= 55;	
	optional bool HasBEPars= 56;
	optional bool HasCentroidDistanceFDPars= 57;	

}//close Contour schema

//==============================
//==   BLOB
//==============================
message Blob {
	//Main params
	optional bool HasPixelsAtEdge= 1;
	optional int64 Id= 2;//Blob id
	optional string Name= 3;//Blob name

	//Stats params
	optional int64 NPix= 4;//Number of pixels in blob
	optional float Mean= 5;//mean = M1/N
	optional float RMS= 6;
	optional float Skewness= 7;
	optional float Median= 8;
	optional float MedianRMS= 9;
	optional float X0= 10;//X position average
	optional float Y0= 11;//Y position average

	//Curvature moments			
	optional float Mean_curv= 12;
	optional float RMS_curv= 13;
	optional float Median_curv= 14;
	optional float MedianRMS_curv= 15;

	//2D morphological pars
	repeated float Moments= 16;
	repeated float HuMoments= 17;
	repeated float ZMMoments= 18;

	optional bool m_HasStats= 19;
	optional bool m_HasParameters = 20;
	
	//Pixel intensity moments
	optional float m_M1= 21;//1st moment
	optional float m_M2= 22;//2nd moment
	optional float m_M3= 23;//3rd moment
	optional float m_M4= 24;//4th moment

	//Pixel curvature moments
	optional float m_M1_curv= 25;//1st moment
	optional float m_M2_curv= 26;//2nd moment

	//Moments accumulator
	optional float m_S= 27;//sum of pixel signals
	optional float m_Smax= 28;//max of pixel signals
	optional float m_Smin= 29;//min of pixel signals
	optional float m_Sxx= 30;
	optional float m_Syy= 31;
	optional float m_Sxy= 32;
	optional float m_Sx= 33;//Signal-weighted X position average
	optional float m_Sy= 34;//Signal-weighted Y position average
	optional int64 m_PixIdmax= 35;//id of pixel with max signal
	optional int64 m_PixIdmin= 36;//id of pixel with min signal		
	optional float m_S_curv= 37;//sum of pixel curvature
	optional float m_S_edge= 38;//sum of edge estimator

	//Image ranges
	optional int64 m_ImageSizeX= 39;
	optional int64 m_ImageSizeY= 40;
	optional float m_ImageMinX= 41;
	optional float m_ImageMaxX= 42;
	optional float m_ImageMinY= 43;
	optional float m_ImageMaxY= 44;
	optional float m_ImageMinS= 45;
	optional float m_ImageMaxS= 46;
	optional float m_ImageMinScurv= 47;
	optional float m_ImageMaxScurv= 48;
	optional float m_ImageMinSedge= 49;
	optional float m_ImageMaxSedge= 50;
	optional float m_ImageRMS= 51;		
	optional float m_Xmin= 52;
	optional float m_Xmax= 53;
	optional float m_Ymin= 54;
	optional float m_Ymax= 55;
	optional int64 m_Ix_min= 56;
	optional int64 m_Ix_max= 57;
	optional int64 m_Iy_min= 58;
	optional int64 m_Iy_max= 59;

	//Pixel collection
	repeated Pixel m_Pixels= 60;
			
	//Contour collection
	repeated Contour m_Contours= 61;

	//Bkg average info
	optional float m_bkgSum= 62;
	optional float m_bkgRMSSum= 63;
	optional bool m_hasBoxBkgInfo= 64;
	optional float m_boxBkg= 65;
	optional float m_boxBkgRMS= 66;

	//Image metadata
	optional ImgMetaData m_imgMetaData= 67;

}//close Blob schema

message Dict {
	optional string key= 1;
	optional float val= 2; 
}

message DMatrix {
  optional uint32 rows = 1;
  optional uint32 cols = 2;
  repeated double data = 3 [packed=true];
}

//==============================
//==   SOURCE COMPONENT PARS
//==============================
message SourceComponentPars {
	repeated Dict FitPars= 1;
	repeated Dict FitParsErr= 2;

	optional bool m_hasBeamPars= 3;
	optional float m_beam_bmaj= 4;
	optional float m_beam_bmin= 5;
	optional float m_beam_pa= 6;
	optional float m_beam_eccentricity= 7;
	optional float m_beam_area= 8;

	optional bool m_hasEllipsePars= 9;
	optional float m_x0= 10;
	optional float m_y0= 11;
	optional float m_bmaj= 12;
	optional float m_bmin= 13;
	optional float m_pa= 14;
	optional float m_x0_err= 15;
	optional float m_y0_err= 16;
	optional float m_bmaj_err= 17;
	optional float m_bmin_err= 18;
	optional float m_pa_err= 19;
	optional float m_eccentricity= 20;
	optional float m_area= 21;
	optional float m_rotangle_vs_beam= 22;

	optional bool m_hasWCSEllipsePars= 23;
	optional float m_x0_wcs= 24;
	optional float m_y0_wcs= 25;
	optional float m_bmaj_wcs= 26;
	optional float m_bmin_wcs= 27;
	optional float m_pa_wcs= 28;
	optional float m_x0_err_wcs= 29;
	optional float m_y0_err_wcs= 30;
	optional float m_bmaj_err_wcs= 31;
	optional float m_bmin_err_wcs= 32;
	optional float m_pa_err_wcs= 33;
		
	optional bool m_hasWCSDeconvolvedEllipsePars= 34;
	optional float m_bmaj_deconv_wcs= 35;
	optional float m_bmin_deconv_wcs= 36;
	optional float m_pa_deconv_wcs= 37;

	optional int32 m_sourcenessId= 38;
	optional float m_pixSize= 39;
	optional int32 m_morphId= 40;
	optional bool m_selected= 41;

}//close SourceComponentPars()

//==============================
//==   SOURCE FIT PARS
//==============================
message SourceFitPars {
	
	optional int32 nComponents= 1;
	optional float chi2= 2;
	optional float ndof= 3;
	optional int32 npars= 4;	
	optional int32 npars_free= 5;	
	optional int32 npars_component= 6;//to be added
	optional int32 nfit_points= 7;
	optional int32 status= 8;
	optional int32 minimizer_status= 9;
	optional float offset= 10;
	optional float offset_err= 11;

	optional float residualMean= 12;
	optional float residualRMS= 13;
	optional float residualMedian= 14;
	optional float residualMAD= 15;
	optional float residualMin= 16;
	optional float residualMax= 17;

	repeated SourceComponentPars pars= 18;

	optional bool thetaFixed= 19;
	optional bool offsetFixed= 20;
	optional bool sigmaFixed= 21;
	optional float fluxDensity= 22;
	optional float fluxDensityErr= 23;
	
	optional int32 fitQuality= 24;

	optional DMatrix fitCovarianceMatrix= 25;
	optional DMatrix fluxDensityDerivMatrix= 26;

	optional float normFactor= 27;
		
}//close SourceFitPars()

//==============================
//==   SOURCE
//==============================
message Source {
	optional Blob blob= 1;
	optional int32 MorphId= 2;
	optional int32 SourcenessId= 3;
	optional int32 SimType= 4;
	optional float SimMaxScale= 5;
	optional float m_BeamFluxIntegral= 6;
	optional bool m_IsGoodSource= 7;

	//Nested source info
	optional int32 m_DepthLevel= 8;
	optional bool m_HasNestedSources= 9;
	repeated Source m_NestedSources= 10;
	optional bool m_NestedAsCompositeSourceComponents= 11;

	//True source info
	optional bool m_HasTrueInfo= 12;
	optional float m_S_true= 13;
	optional float m_X0_true= 14;
	optional float m_Y0_true= 15;

	//Fit pars
	optional bool m_HasFitInfo= 16;
	optional SourceFitPars m_fitPars= 17;
	optional int32 m_fitStatus= 18;

	//Spectral index data
	optional bool m_hasSpectralIndexData= 19;
	optional SpectralIndexData m_spectralIndexData= 20;
	optional bool m_hasComponentSpectralIndexData= 21;
	optional SpectralIndexDataCollection m_componentSpectralIndexData= 22;
	
	//Object class ids
	optional int32 ObjLocationId= 23;
	optional int32 ObjClassId= 24;
	optional string ObjClassStrId= 25;
	optional int32 ObjClassSubId= 26;
	optional bool ObjConfirmed= 27;
	repeated int32 componentObjLocationId= 28;
	repeated int32 componentObjClassId= 29;
	repeated string componentObjClassStrId= 30;
	repeated int32 componentObjClassSubId= 31;
	repeated bool componentObjConfirmed= 32;

	//Astro objects
	optional bool m_hasAstroObjectData= 33;
	optional AstroObjectCollection m_astroObjects= 34;
	optional bool m_hasComponentAstroObjectData= 35;
	repeated AstroObjectCollection m_componentAstroObjects= 36;

	//User tags
	repeated string tags= 37;

	//Sourceness score 
	optional float SourcenessScore= 38;

	//Astro object classification score
	optional float ObjClassScore= 39;

}//close Source schema

message SourceCollection {

	repeated Source sources= 1;

}//close SourceCollection schema

//==============================
//==   SPECTRAL INDEX DATA
//==============================
message SpectralIndexData 
{
	optional bool hasSpectralIndex= 1;
	optional bool isMultiSourceMatchIndex= 2;
	optional double spectralIndex= 3;
	optional double spectralIndexErr= 4;
	optional bool isSpectralIndexFit= 5;
	optional double spectralFitChi2= 6;
	optional double spectralFitNDF= 7;

}//close SpectralIndexData

message SpectralIndexDataCollection
{
	repeated SpectralIndexData spectralIndexDataList= 1;
}

//==============================
//==   ASTRO OBJECT
//==============================
message AstroObject 
{
	optional int64 index= 1;
	optional string name= 2;
	optional string id_str= 3;
	optional int32 id= 4;
	optional int32 subid= 5;
	optional double x= 6;
	optional double y= 7;	
	optional double xerr= 8;
	optional double yerr= 9;
	optional string refs= 10;
	optional bool confirmed= 11;

	optional bool hasFrequencyInfo= 12;
	optional double nu= 13;
	optional double dnu= 14;

	optional bool hasFluxInfo= 15;
	optional double peakFlux= 16;
	optional double peakFluxErr= 17;
	optional double fluxDensity= 18;
	optional double fluxDensityErr= 19;
	optional double flux= 20;
	optional double fluxErr= 21;

	optional bool hasSizeInfo= 22;
	optional double radius= 23;

	optional bool hasEllipseInfo= 24;
	optional double bmaj= 25;
	optional double bmin= 26;
	optional double pa= 27;
		
	optional bool hasDeconvEllipseInfo= 28;
	optional double bmaj_deconv= 29;
	optional double bmin_deconv= 30;
	optional double pa_deconv= 31;

}//close AstroObject

message AstroObjectCollection
{
	repeated AstroObject astroObjectList= 1;
}


