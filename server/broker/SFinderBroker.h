/*----- PROTECTED REGION ID(SFinderBroker.h) ENABLED START -----*/
//=============================================================================
//
// file :        SFinderBroker.h
//
// description : Include file for the SFinderBroker class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SFinderBroker_H
#define SFinderBroker_H

#include <WorkerStateCallBack.h>
#include <WorkerSourceDataCallBack.h>
#include <WorkerManager.h>

#include <json/json.h>

#include <tango.h>

namespace Caesar {
	class WorkerManager;
}


/*----- PROTECTED REGION END -----*/	//	SFinderBroker.h

/**
 *  SFinderBroker class description:
 *    
 */

namespace SFinderBroker_ns
{
/*----- PROTECTED REGION ID(SFinderBroker::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations
	class WorkerStateCallBack;
	class WorkerSourceDataCallBack;
	

/*----- PROTECTED REGION END -----*/	//	SFinderBroker::Additional Class Declarations

class SFinderBroker : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(SFinderBroker::Data Members) ENABLED START -----*/

//	Add your own data members
	protected:
		omni_mutex* m_mutex;
		Caesar::WorkerManager* m_workerManager;
		WorkerStateCallBack* m_workerStateCallBack;
		WorkerSourceDataCallBack* m_workerSourceDataCallBack;

/*----- PROTECTED REGION END -----*/	//	SFinderBroker::Data Members

//	Device property data members
public:
	//	federatedBrokers:	List of federated broker devices
	vector<string>	federatedBrokers;
	//	maxNTasksPerWorker_default:	Maximum number of tasks per worker allowed by default
	Tango::DevLong	maxNTasksPerWorker_default;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SFinderBroker(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SFinderBroker(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	SFinderBroker(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~SFinderBroker() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : SFinderBroker::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

//	Dynamic attribute methods
public:

	/**
	 *	Attribute dynStringAttr related methods
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar
	 */
	virtual void read_dynStringAttr(Tango::Attribute &attr);
	virtual bool is_dynStringAttr_allowed(Tango::AttReqType type);
	void add_dynStringAttr_dynamic_attribute(string attname);
	void remove_dynStringAttr_dynamic_attribute(string attname);
	Tango::DevString *get_dynStringAttr_data_ptr(string &name);
	map<string,Tango::DevString>	   dynStringAttr_data;

	//--------------------------------------------------------
	/**
	 *	Method      : SFinderBroker::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command RegisterWorker related method
	 *	Description: Register device with input name in the list of workers
	 *
	 *	@param argin Worker device name to be registered
	 *	@returns 
	 */
	virtual Tango::DevVarLongStringArray *register_worker(Tango::DevString argin);
	virtual bool is_RegisterWorker_allowed(const CORBA::Any &any);
	/**
	 *	Command ListWorkers related method
	 *	Description: List all the workers registered for this broker
	 *
	 *	@returns List of worker devices registered
	 */
	virtual Tango::DevVarStringArray *list_workers();
	virtual bool is_ListWorkers_allowed(const CORBA::Any &any);
	/**
	 *	Command ListFreeWorkers related method
	 *	Description: List the free workers among those registered for this broker
	 *
	 *	@returns List of free workers
	 */
	virtual Tango::DevVarStringArray *list_free_workers();
	virtual bool is_ListFreeWorkers_allowed(const CORBA::Any &any);
	/**
	 *	Command ListBusyWorkers related method
	 *	Description: List the busy worker devices among the registered ones
	 *
	 *	@returns List busy workers
	 */
	virtual Tango::DevVarStringArray *list_busy_workers();
	virtual bool is_ListBusyWorkers_allowed(const CORBA::Any &any);
	/**
	 *	Command PingWorker related method
	 *	Description: Ping a given worker
	 *
	 *	@param argin Worker name
	 */
	virtual void ping_worker(Tango::DevString argin);
	virtual bool is_PingWorker_allowed(const CORBA::Any &any);
	/**
	 *	Command SubscribeWorkers related method
	 *	Description: Subscribe to worker events
	 *
	 */
	virtual void subscribe_workers();
	virtual bool is_SubscribeWorkers_allowed(const CORBA::Any &any);
	/**
	 *	Command SubmitSourceFinderJob related method
	 *	Description: Command source finder job
	 *
	 *	@param argin String arg
	 *               [0]: input image filename
	 *               [1]: config options
	 *               
	 *               Long arg
	 *               [0]: Max number of workers to be allocated
	 *	@returns Long arg
	 *           [0]: ack code
	 *           
	 *           String arg
	 *           [0]: err description
	 */
	virtual Tango::DevVarLongStringArray *submit_source_finder_job(const Tango::DevVarLongStringArray *argin);
	virtual bool is_SubmitSourceFinderJob_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : SFinderBroker::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(SFinderBroker::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	protected:
		int ValidateConfigOptions(Json::Value& optionList,std::string& config);
		int AddJobAttr(std::string& attr_name);
		int RemoveJobAttr(std::string& attr_name);
		bool FindAttr(long int& index,std::string& attr_name);

	friend class WorkerStateCallBack;
	friend class WorkerSourceDataCallBack;

/*----- PROTECTED REGION END -----*/	//	SFinderBroker::Additional Method prototypes
};

/*----- PROTECTED REGION ID(SFinderBroker::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	SFinderBroker::Additional Classes Definitions

}	//	End of namespace

#endif   //	SFinderBroker_H
